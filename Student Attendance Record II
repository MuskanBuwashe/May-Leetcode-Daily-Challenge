/*An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:

'A': Absent.
'L': Late.
'P': Present.
Any student is eligible for an attendance award if they meet both of the following criteria:

The student was absent ('A') for strictly fewer than 2 days total.
The student was never late ('L') for 3 or more consecutive days.
Given an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. The answer may be very large, so return it modulo 109 + 7.

 

Example 1:

Input: n = 2
Output: 8
Explanation: There are 8 records with length 2 that are eligible for an award:
"PP", "AP", "PA", "LP", "PL", "AL", "LA", "LL"
Only "AA" is not eligible because there are 2 absences (there need to be fewer than 2).
Example 2:

Input: n = 1
Output: 3
Example 3:

Input: n = 10101
Output: 183236316
 

Constraints:

1 <= n <= 105*/
 public class Solution {
    private static final int MOD = 1000000007;

    private int[][] matmul(int[][] A, int[][] B) {
        int[][] C = new int[6][6];
        for (int k = 0; k < 6; k++) {
            for (int i = 0; i < 6; i++) {
                for (int j = 0; j < 6; j++) {
                    C[i][j] = (int) ((C[i][j] + (long) A[i][k] * B[k][j]) % MOD);
                }
            }
        }
        return C;
    }

    private int[][] pow(int[][] A, int n) {
        if (n == 1) {
            return A;
        }
        int[][] t = pow(A, n / 2);
        t = matmul(t, t);
        if (n % 2 != 0) {
            t = matmul(t, A);
        }
        return t;
    }

    public int checkRecord(int n) {
        int[][] baseMatrix = {
            {1, 1, 1, 0, 0, 0},
            {1, 0, 0, 0, 0, 0},
            {0, 1, 0, 0, 0, 0},
            {1, 1, 1, 1, 1, 1},
            {0, 0, 0, 1, 0, 0},
            {0, 0, 0, 0, 1, 0}
        };

        int[][] resultMatrix = pow(baseMatrix, n);

        int result = 0;
        for (int i = 0; i < 6; i++) {
            result = (result + resultMatrix[i][0]) % MOD;
        }
        return result;
    }
}
